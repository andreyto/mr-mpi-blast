#!/usr/bin/env python

## Example of input OldOptionFile
## ----------------------------------------------------------------------------
##   blastall -p blastn -i 10seqs.query -d nt.00 -e 10.0 -F T -G 0 -E 0 -X 0 -I F -q -3 -r 1 -v 500 -b 250 -f 0 -g T -Q 1 -D 1 -a 1 -J F -W 11 -z 364332541498 -K 0 -P 0 -Y 0 -S 3 -T F -y 0.0 -Z 0 -n F -A 0 -w 0 -t 0 -B 0 -V F -C D -s F
## ----------------------------------------------------------------------------

## NOTE:
## ----------------------------------------------------------------------------
## -f of blastall is not supported for blastn!!
## -G=-1/0, -E=-1/0 is not working.  The default values in
    ## blastall are -1 or 0. -1 does not working. If set as "0", 
    ## needs Greedy setting.


## 1. -z : effective dbsize = 364332541498 <= computed from AUG 15 NCBI DB
## 2. should add -db_soft_mask 30 for using masked db 
## 3. shoudd add -M BLOSUM62 for protein
## 4. -W
    ## Word size, default if zero (blastn 11, megablast 28, all others 3) 
    ## [Integer] default = 0 ==> 0 is not working for blastn+.
    ## In blastn+: -word_size <Integer, >=4>
    ## Word size for wordfinder algorithm (length of best perfect match) 
    ## -W 0 ==> -W 11 in blastn 


import subprocess
import sys

if __name__ == '__main__':
    
    if len(sys.argv) != 4:
        print "USAGE: python convert.py legacyOptionFile newOptionFile n|p\n"
        sys.exit(0)
    
    oldOptionFileName = sys.argv[1]
    outFileName = sys.argv[2]
    protein = False
    if (sys.argv[3] == 'p'):
        protein = True
    else:
        protein = False
    
    ##
    ## Read oldOptionFile 
    ##
    f = open(oldOptionFileName, 'r')
    oldOptionStr = ""
    for line in f:
        oldOptionStr += line
    print oldOptionStr
    f.close()
    
    ##
    ## Run legacy_blast.pl
    ##
    if (protein):
        cmd1 = "perl legacy_blast.pl " + oldOptionStr.strip() + " -p blastp --print_only"
    else:
        cmd1 = "perl legacy_blast.pl " + oldOptionStr.strip() + " -p blastn --print_only"
    print cmd1
    
    p = subprocess.Popen(cmd1, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout_value = p.communicate()[0] 
    print stdout_value 
    
    cmd2 = stdout_value.strip() + " -export_search_strategy strategy_temp.txt" 
    cmd2 = cmd2[9:] ## remove "/usr/bin/"
    
    ## Wierdly, the below options are generated by legacy_blast.pl but rejected 
    ## by blastn/p+
    cmd2 = cmd2.replace("-task blastn","")
    cmd2 = cmd2.replace("-query_gencode 1","")
    cmd2 = cmd2.replace("-db_gencode 1","")
    cmd2 = cmd2.replace("-max_intron_length 0","")
    cmd2 = cmd2.replace("-frame_shift_penalty 0","")
    cmd2 = cmd2.replace("-comp_based_stats D","")
    if (protein):
        cmd2 = cmd2.replace("-min_word_score 11","")
        cmd2 = cmd2.replace("-penalty -3","")
        cmd2 = cmd2.replace("-reward 1","")
        
    print cmd2
    
    ##
    ## Run blastn to get the export_search_strategy output file
    ##
    p2 = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout_value = p2.communicate()[0] 

    ##
    ## Make strategy file for mr-mpi-blast
    ##
    if (protein):
        f3 = open("header_blastp.txt", 'r')
    else:
        f3 = open("header_blastn.txt", 'r')
    headerStr = ""
    for line in f3:
        headerStr += line
 
    f3.close()
    
    f4 = open("strategy_temp.txt", "r")
    add = False
    for line in f4:
        if line.find("subject database") > -1:
            add = True
        if (add):
            headerStr += line
 
    f4.close()
    
    f5 = open(outFileName, "w")
    f5.write(headerStr)
    f5.close()
    
 
## EOF
